package com.stephenott.stix.objects.core.sdo.objects

import com.stephenott.stix.objects.core.sdo.StixDomainObject
import com.stephenott.stix.objects.core.sro.objects.AllowedRelationship
import com.stephenott.stix.objects.core.sro.objects.RelationshipSro
import com.stephenott.stix.type.*
import com.stephenott.stix.type.vocab.MalwareAvResult

interface MalwareAnalysisSdo : StixDomainObject {
    val product: Product
    val version: String?
    val hostVmRef: StixIdentifier?
    val operatingSystemRef: StixIdentifier?
    val installedSystemRefs: StixIdentifiers?
    val configurationVersion: String?
    val modules: StixStringList?
    val analysisEngineVersion: String?
    val analysisDefinitionVersion: String?
    val submitted: StixInstant?
    val analysisStarted: StixInstant?
    val analysisEnded: StixInstant?
    val avResult: MalwareAvResult?
    val analysisScoRefs: StixIdentifiers?

    companion object{
        val stixType = StixType("malware-analysis")

        val allowedRelationships: List<AllowedRelationship> = listOf(
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("characterizes"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("av-analysis-of"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("static-analysis-of"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("dynamic-analysis-of"),
                MalwareSdo::class
            )
        )
    }
}

data class MalwareAnalysis
    (
    override val product: Product,
    override val version: String? = null,
    override val hostVmRef: StixIdentifier? = null,
    override val operatingSystemRef: StixIdentifier? = null,
    override val installedSystemRefs: StixIdentifiers? = null,
    override val configurationVersion: String? = null,
    override val modules: StixStringList? = null,
    override val analysisEngineVersion: String? = null,
    override val analysisDefinitionVersion: String? = null,
    override val submitted: StixInstant? = null,
    override val analysisStarted: StixInstant? = null,
    override val analysisEnded: StixInstant? = null,
    override val avResult: MalwareAvResult? = null,
    override val analysisScoRefs: StixIdentifiers? = null,
    override val type: StixType = MalwareAnalysisSdo.stixType,
    override val id: StixIdentifier = StixIdentifier(type),
    override val createdByRef: String? = null,
    override val created: StixInstant = StixInstant(),
    override val externalReferences: ExternalReferences? = null,
    override val objectMarkingsRefs: String? = null,
    override val granularMarkings: String? = null,
    override val specVersion: StixSpecVersion = StixSpecVersion(),
    override val labels: StixLabels? = null,
    override val modified: StixInstant = StixInstant(created),
    override val revoked: StixBoolean = StixBoolean(),
    override val confidence: StixConfidence? = null,
    override val lang: StixLang? = null
) :
    MalwareAnalysisSdo {
    override fun allowedRelationships(): List<AllowedRelationship> {
        return MalwareAnalysisSdo.allowedRelationships + RelationshipSro.allowedCommonRelationships
    }
}