package io.digitalstate.stix.domainobjects;

import io.digitalstate.stix.domainobjects.properties.MalwareProperties;
import io.digitalstate.stix.vocabularies.Vocabularies;
import org.apache.commons.lang3.StringUtils;

import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;

import static io.digitalstate.stix.helpers.IdGeneration.generateUuidAsString;

public class Malware extends MalwareProperties implements StixDomainObject {

    private static final String TYPE = "malware";

    public Malware(String name,
                   LinkedHashSet<String> malwareLabels){

        setType(TYPE);
        setId(generateUuidAsString());
        setName(name);
        setLabels(malwareLabels);
    }
    public Malware(String name, String... malwareLabels){
        this(name, new LinkedHashSet<>(Arrays.asList(malwareLabels)));
    }

    @Override
    public void setName(String name) {
        if (StringUtils.isNotBlank(name)){
            this.name = name;
        } else {
            throw new IllegalArgumentException("Name cannot be null or blank");
        }
    }

    /**
     *
     * @param labels labels are enforced with malwareLabel vocabulary
     */
    @Override
    public void setLabels(LinkedHashSet<String> labels) {
        Set<String> malwareLabels = Vocabularies.getMalwareLabels();

        Objects.requireNonNull(labels, "Labels cannot be null");

        if (!malwareLabels.containsAll(labels)){
            throw new IllegalArgumentException("One or more invalid labels were provided: valid-labels: "
                    + malwareLabels.toString() + ". Labels-provided: " + labels.toString());

        } else if (!labels.isEmpty()){
            super.setLabels(labels);

        } else {
            throw new IllegalArgumentException("At least one valid label must be provided for a STIX " + TYPE + " sdo");
        }
    }
}
